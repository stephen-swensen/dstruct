@{
    ViewData["Title"] = "Blog";
}

<div class="text-left">
    <h1 class="display-4">DStruct-ive Adventures</h1>
    
    <p style="font-style: italic">
        A DStruct-ive blog by <a href="https://stackoverflow.com/users/236255/stephen-swensen?tab=profile">Stephen Swensen</a>, documenting his adventures implementing
        persistent Data Structures as a Service with a relational data store
        and a RESTful interface. Built with by C# / .NET 6 and deployed on Azure.
    </p>
    
    <h2 class="display-6">May 23th, 2022 - 10:49pm ET</h2>
    
    <p>
    Notes on SQL: it looks like there is a version of SQL Server for Linux and
    corresponding docker containers available and that they have parity with
    the Cloud AZure SQL offering. There is also a "local" (file-based) version
    which could potentially be used tests. So all together, could be able to 
    run an isolated environment independent of Azure for local development,
    plus ephemeral file-based relational store for tests, while deploying
    to Azure SQL for production.
    </p>
    
    <p>
    Link for install SQL Server 2019 on Ubuntu (which will also install the
    <code>sqlcmd</code> tool which I think may prove usefule Azure SQL
    access eventually too): <a href="https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15">link</a>
    </p>
    
    <p>In fact, the command line tool can be installed separately: <a href="https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver16#tools">link</a></p>
    
    <p>So maybe coulda just stuck with that + running in a docker container with persistent disk store: <a href="https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-ver16&pivots=cs1-bash>link">link</a></p>
    
    <p>In anycase, got it working locally. Pretty amazing to see SQL Server running natively on linux (MS has a come a LONG way in the last 6 years, hasn't it)!</p>
    
    <h2 class="display-6">May 23th, 2022 - 09:41am ET</h2>
    
    Today:
    <ul>
        <li>Use lowercase route paths</li>
        <li>Remove support for https in the application layer. We'll implement that in the load balancer / reverse proxy layer.</li>
    </ul>
    
    <h2 class="display-6">May 22th, 2022 - 11:59pm ET</h2>
    
    <p>Created docker-compose.yml and got it working.</p>
    
    <h2 class="display-6">May 21th, 2022 - 11:18pm ET</h2>
    
    <p>Got docker working by side stepping the issue: removed Docker Engine and installed Docker for Desktop instead. Not sure what the issue was exactly but must have been networking issue related to my VPN. Docker Enginer runs in a VM so must have a different networking strategy.</p>
    
    <h2 class="display-6">May 20th, 2022 - 2:44pm ET</h2>
    
    <p>Working on the docker nuget restore issue today. Looks like it is an outbound networking issue as <code>RUN curl example.org</code> also stalls. Could have something to do with my VPN and / or DNS. Will follow up later today.</p>
    <p>Doing otherwork tightening up around docker builds. Enabling lock-file package restores. Pinning specific docker base image versions for greater reproducibility guarantees (I've had patch version numbers introduce breaking changes in the past). Want to get docker-compose to work so can manage running <code>api</code> and <code>www</code> side-by-side.</p>
    <p>I might make a TODO page separate from this blog. As referencing back to blog entries might become tiring and easy to get lost.</p>
    
    <h2 class="display-6">May 19th, 2022 - 11:17pm ET</h2>
    <p>Today:</p>
    <ul>
        <li>Spun up the <code>api</code> project with a simple <code>/status</code> endpoint</li>
        <li>Got docker running in Rider for the <code>www</code> project but hit a snag with the <code>api</code> project getting hung on <code>dotnet restore</code>.</li>
    </ul>
    
    <h2 class="display-6">May 18th, 2022 - 10:41pm ET</h2>
    <p>Today:</p>
    <ul>
        <li>Implement favicon using ðŸ’¥ emoji with <a href="https://css-tricks.com/emoji-as-a-favicon/">css "trick"</a></li>
        <li>Hypothesis: saving modified files with <code>:w</code> with vim emulation may be confusing the "Apply changes" action working for Hot Reloading. But it's still inconsistent, and once it starts working it seems to keep working for a time.</li>
    </ul>
    
    A word: in spite of my personal wish for greater transparency on blog sites w.r.t. created / updated timestamps and log of changes, I am going to allow myself to be less rigorous and treat this blog more like a personal journal. I'll do it sparinglying and only for practical purposes, but I may modify recent entries to fix typos or even edit meaningful content.
    
    <h2 class="display-6">May 16th, 2022 - 9:30pm ET</h2>
    <p>So far I've done the following:</p>
    <ul>
        <li>Purchased the domain name <a href="https://www.dstruct.dev">dstruct.dev</a> (pretty cheap)</li>
        <li>Set up a personal Azure account (free trial)</li>
        <li>Purchased a personal Rider licesnse (monthly)</li>
        <li>Created the dstruct solution with a www project for the dstruct home and blog</li>
        <li>Created a <a href="https://github.com/stephen-swensen/dstruct">public GitHub repository</a> under my personal account</li>
        <li>Got https working locally (on linux + firefox); not really necessary but I was curious</li>
        <li>Played around with Hot Reloading (we're targetting .NET 6), but it's been inconsistent (unfortunately)</li>
    </ul>
        
    <p>
        I'm doing development on my personal X1 Carbon Gen 7 which is running Linux Mint.
        I'm using Rider as my primary IDE + vim to hack at files ad-hoc.
    </p>
    
    <p>Some things I'm thinking about doing next:</p>
    <ul>
        <li>Getting this thing deployed to Azure (perhaps with Kubernetes, definitely with Docker containers)</li>
        <li>Get an SSL cert for *.dstruct.dev (through Azure or LetsEncrypt?)</li>
        <li>Setting up the Azure SQL db in Azure</li>
        <li>Setting up key / value store in Azure for managing application variables?</li>
        <li>Configuring <a href="https://csharpier.com/docs/Installation">CSharpier</a> for code formatting</li>
        <li>Look into whether using HTML5 tags like <code>article</code> might be a better way to organize this blog</li>
        <li>Look into whether I should create separate files for each blog entry, and perhaps load them dynamically (maybe inlined, maybe as a hyperlinked TOC)</li>
        <li>Need favicon for the www site (maybe just use the boom emoji somehow)</li>
        <li>Try to get Hot Reloading to work consistently (or maybe fallback on older methods for Razer view files at least)</li>
        <li>Getting the <code>api</code> project set-up of course (a separate WebAPI project and deployment unit under the same mono repo solution)</li>
        <li>Start scripting out the SQL data structures of course (I'm thinking to start with stack or queue first)</li>
        <li>Look into multi-tenate patterns in Azure SQL (Row Level Security - RLS - looks like a promising foundation)</li>
    </ul>
    
    Well, that rather turned into a TODO list.
</div>
